{"version":3,"sources":["components/Footer.js","components/Header.js","components/Navbar.js","components/Welcome.js","components/ProfileComponents/AddProfileForm.js","components/ProfileComponents/ProfilesList.js","components/ProfileComponents/ProfileDisplay.js","components/ProfileComponents/Profiles.js","components/GroupComponents/CreateGroupForm.js","components/GroupComponents/ListOfGroups.js","components/GroupComponents/CurrentGroupDisplay.js","components/GroupComponents/Groups.js","components/FoodComponents/ChooseGroup.js","components/FoodComponents/ingredientsList.js","components/FoodComponents/IngredientInput.js","components/FoodComponents/nonVegFood.js","components/FoodComponents/nonVeganFood.js","components/FoodComponents/nonGlutenFreeFood.js","components/FoodComponents/nonNutAllergyFood.js","components/FoodComponents/MembersDisplay.js","components/FoodComponents/Food.js","exampleData.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","id","href","target","Header","Navbar","to","Welcome","AddProfileForm","props","checkboxData","name","checked","newProfile","isVegetarian","text","isVegan","isGlutenFree","hasNutAllergy","length","onSubmit","event","preventDefault","profileIndex","profileData","findIndex","i","setProfileData","prevInfo","prevProfiles","splice","setNewProfile","setSelectedProfile","placeholder","value","onChange","e","handleChange","map","item","key","type","ProfilesList","onClick","find","x","ProfileDisplay","profile","selectedProfile","Profiles","useState","CreateGroupForm","newGroup","groupName","groupIndex","groupData","setGroupData","prevGroups","setNewGroup","members","addProfiletoGroup","ListOfGroups","display","CurrentGroupDisplay","memberId","filter","removeGroupMember","Groups","ChooseGroup","group","setCurrentGroup","ingredientsList","IngredientInput","listOpen","setListOpen","ingredientInput","setIngredientInput","dropDownDisplay","ingredient","ingredientLowerCase","toLowerCase","ingredientInputLowerCase","startsWith","setIngredient","handleSelect","useEffect","dropDownInput","nonVegFood","nonVeganFood","nonGlutenFreeFood","nonNutAllergyFood","MembersDisplay","displayGroupMembers","includes","veganCheck","glutenFreeCheck","nutAllergyCheck","iconDisplay","currentGroupName","ingredientDisplay","toUpperCase","slice","currentGroup","Food","exampleData","App","stateUpdateFunction","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aeaeb02b.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Footer(){\r\n  return(\r\n    <div className=\"row\" id=\"bottom\">\r\n      <div>\r\n        <h4>Created by <a href=\"https://twitter.com/esschapman\" target=\"_blank\" id=\"footer-link\">Sophie Chapman</a></h4>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from \"react\"\r\n\r\nfunction Header() {\r\n  return(\r\n    <div className=\"row\" id=\"top\">\r\n      <div>\r\n        <h1>Fooooooooooooooooooood!<span id=\"working-title\">(working title)</span></h1>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\nfunction Navbar(){\r\n  return(\r\n    <div className=\"nav-row\">\r\n      <Link to=\"/profiles\">\r\n        <div className=\"nav-button\">\r\n          <h2>Profiles</h2>\r\n        </div>\r\n      </Link>\r\n      <Link to=\"/groups\">\r\n        <div className=\"nav-button\">\r\n          <h2>Groups</h2>\r\n        </div>\r\n      </Link>\r\n      <Link to=\"/food\">\r\n        <div className=\"nav-button\">\r\n          <h2>Food</h2>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React from \"react\"\r\n\r\nfunction Welcome(){\r\n  return(\r\n    <div className=\"welcome-container\">\r\n      <h1>Welcome</h1>\r\n      <h4>To get started, use <em>Profiles</em> create a record of your friends' eating preferences.</h4>\r\n      <h4>Then in <em>Groups</em>, make up a list of who is coming to your next dinner party!</h4>\r\n      <h4>When it comes to cooking up a storm, use <em>Food</em> to check whether your chosen ingredients will suit everyone.</h4>\r\n      <h4>Happy cooking!</h4>\r\n      <h4><em>Note: This project is in its early stages, so the diet/preferences options and ingredients list is limited. Also, I am not a dietician or nutritionist so don't rely on this app to decide what to feed your friends with allergies and whatnot.</em></h4>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Welcome\r\n","import React from \"react\"\r\n\r\nfunction AddProfileForm(props) {\r\n  const checkboxData = [\r\n    {name: \"isVegetarian\", checked: props.newProfile.isVegetarian, text: \"Vegetarian\"},\r\n    {name: \"isVegan\", checked: props.newProfile.isVegan, text: \"Vegan\"},\r\n    {name: \"isGlutenFree\", checked: props.newProfile.isGlutenFree, text: \"Gluten Free\"},\r\n    {name: \"hasNutAllergy\", checked: props.newProfile.hasNutAllergy, text: \"Nut Allergy\"}\r\n  ];\r\n\r\n  function handleSubmit(event){\r\n    event.preventDefault();\r\n    var profileIndex = props.profileData.findIndex(i => i.id === props.newProfile.id);\r\n\r\n    props.setProfileData(prevInfo => {\r\n      if (profileIndex === -1){\r\n        return [...prevInfo, props.newProfile]\r\n      } else {\r\n        var prevProfiles = [...prevInfo]\r\n        prevProfiles.splice(profileIndex, 1, props.newProfile);\r\n        return prevProfiles\r\n      }\r\n    })\r\n\r\n    props.setNewProfile({\r\n      id: props.profileData.length + 2,\r\n      name: \"\",\r\n      isVegetarian: false,\r\n      isVegan: false,\r\n      isGlutenFree: false,\r\n      hasNutAllergy: false\r\n    });\r\n\r\n    props.setSelectedProfile(\"\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"component\">\r\n      {props.newProfile.name.length == 0 ? <h3>Add Profile</h3> : <h3>Edit Profile</h3>}\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          className=\"text-input\"\r\n          placeholder=\"Name\"\r\n          name=\"name\"\r\n          value={props.newProfile.name}\r\n          onChange={(e) => props.handleChange(e, props.setNewProfile)}\r\n        />\r\n        <br />\r\n        {checkboxData.map(item =>\r\n          <div className=\"checkbox\" key={item.name}>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                name={item.name}\r\n                checked={item.checked}\r\n                onChange={(e) => props.handleChange(e, props.setNewProfile)}\r\n              />\r\n               {item.text}\r\n            </label>\r\n            <br />\r\n          </div>\r\n        )}\r\n        <button className=\"app-button\">Save</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddProfileForm\r\n","import React from \"react\"\r\n\r\nfunction ProfilesList(props) {\r\n  function edit(name) {\r\n    props.setSelectedProfile(name);\r\n    props.setNewProfile(props.profileData.find(x => x.name === name))\r\n  }\r\n\r\n  return (\r\n    <div className=\"component\">\r\n      <h3>Your Profiles</h3>\r\n      {props.profileData.map(item =>\r\n        <div key={item.name}>\r\n          <p>\r\n            {item.name}\r\n            <button className=\"icon-button\" onClick={() => props.setSelectedProfile(item.name)}><i className=\"fas fa-eye\"></i></button>\r\n            <button className=\"icon-button\" onClick={() => edit(item.name)}><i className=\"fas fa-edit\"></i></button>\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfilesList\r\n","import React from \"react\"\r\n\r\nfunction ProfileDisplay(props) {\r\n    var profile = props.profileData.find(x => x.name === props.selectedProfile)\r\n\r\n    return (\r\n      <div className=\"component\">\r\n        <h3>Profile Display</h3>\r\n        <p><b>{profile.name}</b></p>\r\n        <p>Vegetarian: {profile.isVegetarian ? <i className=\"fas fa-check-circle\"></i> : <i className=\"fas fa-times-circle\"></i>}</p>\r\n        <p>Vegan: {profile.isVegan ? <i className=\"fas fa-check-circle\"></i> : <i className=\"fas fa-times-circle\"></i>}</p>\r\n        <p>Gluten Free: {profile.isGlutenFree ? <i className=\"fas fa-check-circle\"></i> : <i className=\"fas fa-times-circle\"></i>}</p>\r\n        <p>Nut Allergy: {profile.hasNutAllergy ? <i className=\"fas fa-check-circle\"></i> : <i className=\"fas fa-times-circle\"></i>}</p>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ProfileDisplay\r\n","import React, {useState} from \"react\"\r\nimport AddProfileForm from \"./AddProfileForm\"\r\nimport ProfilesList from \"./ProfilesList\"\r\nimport ProfileDisplay from \"./ProfileDisplay\"\r\n\r\nfunction Profiles(props){\r\n  const [selectedProfile, setSelectedProfile] = useState(\"\");\r\n  const [newProfile, setNewProfile] = useState({\r\n    id: props.profileData.length + 1,\r\n    name: \"\",\r\n    isVegetarian: false,\r\n    isVegan: false,\r\n    isGlutenFree: false,\r\n    hasNutAllergy: false\r\n  });\r\n\r\n  return(\r\n    <div className=\"component-container\">\r\n        <ProfilesList\r\n          profileData={props.profileData}\r\n          setSelectedProfile={setSelectedProfile}\r\n          setNewProfile={setNewProfile}\r\n        />\r\n        {selectedProfile.length > 0 ?\r\n          <ProfileDisplay\r\n          selectedProfile={selectedProfile}\r\n          profileData={props.profileData}\r\n          /> :\r\n          null\r\n        }\r\n        <AddProfileForm\r\n          profileData={props.profileData}\r\n          setProfileData={props.setProfileData}\r\n          handleChange={props.handleChange}\r\n          newProfile={newProfile}\r\n          setNewProfile={setNewProfile}\r\n          setSelectedProfile={setSelectedProfile}\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profiles\r\n","import React from \"react\"\r\n\r\nfunction CreateGroupForm(props){\r\n  function addProfiletoGroup(item){\r\n    props.setNewGroup(prevInfo => ({...prevInfo, members: [...prevInfo.members, item.id]}))\r\n  }\r\n\r\n  function handleSubmit(event){\r\n    event.preventDefault();\r\n\r\n    var groupIndex = props.groupData.findIndex(i => i.groupName === props.newGroup.groupName)\r\n    props.setGroupData(prevInfo => {\r\n      if (groupIndex === -1){\r\n        return [...prevInfo, props.newGroup]\r\n      } else {\r\n        var prevGroups = [...prevInfo]\r\n        //use splice to replace old group with new\r\n        prevGroups.splice(groupIndex, 1, props.newGroup)\r\n        return prevGroups\r\n      }\r\n    })\r\n\r\n    props.setNewGroup({groupName: \"\", members: []})\r\n  }\r\n\r\n  return (\r\n    <div className=\"component\">\r\n      {props.newGroup.groupName.length === 0 ? <h3>Add Group</h3> : <h3>Edit Group</h3>}\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          className=\"text-input\"\r\n          placeholder=\"Group Name\"\r\n          name=\"groupName\"\r\n          value={props.newGroup.groupName}\r\n          onChange={(e) => props.handleChange(e, props.setNewGroup)}\r\n        />\r\n        <div>\r\n          <ul className=\"list-display\">\r\n            {props.profileData.map(item =>\r\n              <li className=\"list-display-item\" key={item.name} onClick={() => addProfiletoGroup(item)}>{item.name}</li>\r\n            )}\r\n          </ul>\r\n        </div>\r\n        <button className=\"app-button\">Save Group</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateGroupForm\r\n","import React from \"react\"\r\n\r\nfunction ListOfGroups(props){\r\n  const display =\r\n    props.groupData.length > 0 ?\r\n    props.groupData.map(item =>\r\n      <p key={item.groupName}>\r\n        {item.groupName}\r\n        <button className=\"icon-button\" onClick={() => props.setNewGroup(item)}><i className=\"fas fa-edit\"></i></button>\r\n      </p>\r\n    ) :\r\n    <p>No groups yet.</p>\r\n\r\n  return (\r\n    <div className=\"component\">\r\n      <h3>Your Groups</h3>\r\n      {display}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ListOfGroups\r\n","import React from \"react\"\r\n\r\nfunction CurrentGroupDisplay(props) {\r\n  function displayGroupMembers(memberId) {\r\n    var profile = props.profileData.find(x => x.id === memberId)\r\n    return (\r\n      <p key={profile.id}>{profile.name}\r\n        <button className=\"icon-button\" onClick={() => removeGroupMember(profile.id)}>\r\n          <i className=\"fas fa-minus-circle\"></i>\r\n        </button>\r\n      </p>\r\n    )\r\n  }\r\n\r\n  function removeGroupMember(memberId) {\r\n    props.setNewGroup(prevInfo => ({\r\n      ...prevInfo,\r\n      members: prevInfo.members.filter(id => id !== memberId)\r\n    }))\r\n  }\r\n\r\n  return(\r\n    <div className=\"component\">\r\n      <h3>{props.newGroup.groupName}</h3>\r\n      {props.newGroup.members.map(displayGroupMembers)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CurrentGroupDisplay\r\n","import React, {useState} from \"react\"\r\nimport CreateGroupForm from \"./CreateGroupForm\"\r\nimport ListOfGroups from \"./ListOfGroups\"\r\nimport CurrentGroupDisplay from \"./CurrentGroupDisplay\"\r\n\r\nfunction Groups(props) {\r\n  const [newGroup, setNewGroup] = useState({groupName: \"\", members: []})\r\n\r\n  return(\r\n    <div className=\"component-container\">\r\n      <ListOfGroups\r\n        groupData={props.groupData}\r\n        setNewGroup={setNewGroup}\r\n      />\r\n      {newGroup.groupName.length > 0 ?\r\n        <CurrentGroupDisplay\r\n          newGroup={newGroup}\r\n          setNewGroup={setNewGroup}\r\n          profileData={props.profileData}\r\n        /> :\r\n        null\r\n      }\r\n      <CreateGroupForm\r\n        newGroup={newGroup}\r\n        setNewGroup={setNewGroup}\r\n        profileData={props.profileData}\r\n        addProfiletoGroup={props.addProfiletoGroup}\r\n        handleChange={props.handleChange}\r\n        groupData={props.groupData}\r\n        setGroupData={props.setGroupData}\r\n      />\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Groups\r\n","import React from \"react\"\r\n\r\nfunction ChooseGroup(props){\r\n\r\n  function handleClick(groupName){\r\n    props.setCurrentGroup(groupName)\r\n  }\r\n\r\n  return (\r\n    <div className=\"component\">\r\n      <h3>Select Group</h3>\r\n      <ul className=\"list-display\">\r\n        {props.groupData.map(group =>\r\n          <li className=\"list-display-item\" key={group.groupName} onClick={() => handleClick(group.groupName)}>{group.groupName}</li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default ChooseGroup\r\n","const ingredientsList = [\r\n  \"Almond\",\r\n  \"Bacon\",\r\n  \"Beef\",\r\n  \"Beans\",\r\n  \"Bread\",\r\n  \"Butter\",\r\n  \"Cashews\",\r\n  \"Carrot\",\r\n  \"Calamari\",\r\n  \"Cheese\",\r\n  \"Chicken\",\r\n  \"Corn\",\r\n  \"Couscous\",\r\n  \"Crab\",\r\n  \"Cream\",\r\n  \"Duck\",\r\n  \"Egg\",\r\n  \"Fish\",\r\n  \"Flour\",\r\n  \"Hazelnut\",\r\n  \"Honey\",\r\n  \"Ice cream\",\r\n  \"Lamb\",\r\n  \"Lobster\",\r\n  \"Macadamia nuts\",\r\n  \"Meat\",\r\n  \"Milk\",\r\n  \"Mussels\",\r\n  \"Oysters\",\r\n  \"Pasta\",\r\n  \"Peanut\",\r\n  \"Pecans\",\r\n  \"Pine nuts\",\r\n  \"Pistachios\",\r\n  \"Pork\",\r\n  \"Potato\",\r\n  \"Prawns\",\r\n  \"Quinoa\",\r\n  \"Squid\",\r\n  \"Turkey\",\r\n  \"Veal\",\r\n  \"Walnuts\",\r\n  \"Xylophone\",\r\n  \"Yoghurt\"\r\n]\r\n\r\nexport default ingredientsList\r\n","import React, {useState, useEffect} from \"react\"\r\nimport ingredientsList from \"./ingredientsList\"\r\n\r\nfunction IngredientInput(props) {\r\n  const [listOpen, setListOpen] = useState(false)\r\n  const [ingredientInput, setIngredientInput] = useState(\"\")\r\n\r\n  function handleSelect(ingredient){\r\n    props.setIngredient(ingredient.toLowerCase())\r\n    setIngredientInput(\"\")\r\n    setListOpen(!listOpen)\r\n  }\r\n\r\n  useEffect(() => {\r\n      if (ingredientInput.length > 0) {\r\n        setListOpen(true)\r\n      } else {\r\n        setListOpen(false)\r\n      }\r\n    }, [ingredientInput]\r\n  );\r\n\r\n  function dropDownInput(e) {\r\n    setIngredientInput(e.target.value);\r\n  }\r\n\r\n  //Compares to ingredientInput to each ingredient in ingredientsList. Displays what matches\r\n  function dropDownDisplay(ingredient) {\r\n    var ingredientLowerCase = ingredient.toLowerCase();\r\n    var ingredientInputLowerCase = ingredientInput.toLowerCase();\r\n    if (ingredientLowerCase.startsWith(ingredientInputLowerCase) === true) {\r\n      return <li className=\"list-display-item\" key={ingredient} onClick={() => handleSelect(ingredient)}>{ingredient}</li>\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"component\">\r\n      <h3>Search an ingredient</h3>\r\n      <input\r\n        className=\"text-input\"\r\n        placeholder=\"Type Ingredient\"\r\n        name=\"ingredientInput\"\r\n        value={ingredientInput}\r\n        onChange={(e) => dropDownInput(e)}\r\n      />\r\n      {listOpen && <ul className=\"list-display\">\r\n        {ingredientsList.map(ingredient => dropDownDisplay(ingredient))}\r\n      </ul>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default IngredientInput\r\n","const nonVegFood = [\r\n  \"bacon\",\r\n  \"beef\",\r\n  \"calamari\",\r\n  \"chicken\",\r\n  \"crab\",\r\n  \"duck\",\r\n  \"fish\",\r\n  \"lamb\",\r\n  \"lobster\",\r\n  \"meat\",\r\n  \"mussels\",\r\n  \"oysters\",\r\n  \"pork\",\r\n  \"prawns\",\r\n  \"squid\",\r\n  \"turkey\",\r\n  \"veal\",\r\n  \"xylophone\"\r\n]\r\n\r\nexport default nonVegFood\r\n","const nonVeganFood = [\r\n  \"bacon\",\r\n  \"beef\",\r\n  \"butter\",\r\n  \"calamari\",\r\n  \"cheese\",\r\n  \"chicken\",\r\n  \"crab\",\r\n  \"cream\",\r\n  \"duck\",\r\n  \"egg\",\r\n  \"fish\",\r\n  \"honey\",\r\n  \"ice cream\",\r\n  \"lamb\",\r\n  \"lobster\",\r\n  \"meat\",\r\n  \"milk\",\r\n  \"mussels\",\r\n  \"oysters\",\r\n  \"pork\",\r\n  \"prawns\",\r\n  \"squid\",\r\n  \"turkey\",\r\n  \"veal\",\r\n  \"xylophone\",\r\n  \"yoghurt\"\r\n]\r\n\r\nexport default nonVeganFood\r\n","const nonGlutenFreeFood = [\r\n  \"bread\",\r\n  \"couscous\",\r\n  \"flour\",\r\n  \"pasta\",\r\n  \"xylophone\"\r\n]\r\n\r\nexport default nonGlutenFreeFood\r\n","const nonNutAllergyFood = [\r\n  \"almond\",\r\n  \"cashews\",\r\n  \"hazelnut\",\r\n  \"macadamia nuts\",\r\n  \"peanut\",\r\n  \"pecans\",\r\n  \"pine nuts\",\r\n  \"pistachios\",\r\n  \"walnuts\",\r\n  \"xylophone\"\r\n]\r\n\r\nexport default nonNutAllergyFood\r\n","import React from \"react\"\r\nimport nonVegFood from \"./nonVegFood\"\r\nimport nonVeganFood from \"./nonVeganFood\"\r\nimport nonGlutenFreeFood from \"./nonGlutenFreeFood\"\r\nimport nonNutAllergyFood from \"./nonNutAllergyFood\"\r\n\r\nfunction MembersDisplay(props) {\r\n  function findGroup(currentGroupName){\r\n    if (currentGroupName === \"\") {\r\n      return \"No group chosen\"\r\n    } else {\r\n      var group = props.groupData.find(x => x.groupName === currentGroupName)\r\n      return (\r\n        group.members.map(displayGroupMembers)\r\n      )\r\n    }\r\n  }\r\n\r\n  function displayGroupMembers(memberId) {\r\n    var profile = props.profileData.find(x => x.id === memberId)\r\n\r\n    return (\r\n      <li key={profile.id}>{profile.name} {iconDisplay(profile) ? <i className=\"fas fa-check-circle\"></i> : <i className=\"fas fa-times-circle\"></i>}</li>\r\n    )\r\n  }\r\n\r\n  // iconDisplay returns true if person can eat ingredient and false if they can't\r\n\r\n  function iconDisplay(profile){\r\n    if (profile.isVegetarian === true && vegetarianCheck(props.ingredient) === true) {\r\n        return false;\r\n    } else if (profile.isVegan === true && veganCheck(props.ingredient) === true) {\r\n        return false;\r\n    } else if (profile.isGlutenFree === true && glutenFreeCheck(props.ingredient) === true) {\r\n        return false;\r\n    } else if (profile.hasNutAllergy === true && nutAllergyCheck(props.ingredient) === true) {\r\n        return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // these functions return true if the person can't eat it.\r\n\r\n  function vegetarianCheck(ingredient) {\r\n    return nonVegFood.includes(ingredient)\r\n  }\r\n\r\n  function veganCheck(ingredient) {\r\n    return nonVeganFood.includes(ingredient)\r\n  }\r\n\r\n  function glutenFreeCheck(ingredient) {\r\n    return nonGlutenFreeFood.includes(ingredient)\r\n  }\r\n\r\n  function nutAllergyCheck(ingredient) {\r\n    return nonNutAllergyFood.includes(ingredient)\r\n  }\r\n\r\n  const ingredientDisplay = props.ingredient.length > 0 ? props.ingredient[0].toUpperCase() + props.ingredient.slice(1) : \"\";\r\n\r\n  return (\r\n    <div className=\"component\">\r\n      <h3>Who can eat it</h3>\r\n      <p><b>{props.currentGroup}</b></p>\r\n      <p>Ingredient: {ingredientDisplay}</p>\r\n      <ul className=\"list-display\">\r\n        {findGroup(props.currentGroup)}\r\n      </ul>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default MembersDisplay\r\n","import React, {useState} from \"react\"\r\nimport ChooseGroup from \"./ChooseGroup\"\r\nimport IngredientInput from \"./IngredientInput\"\r\nimport MembersDisplay from \"./MembersDisplay\"\r\n\r\nfunction Food(props){\r\n  const [currentGroup, setCurrentGroup] = useState(\"\");\r\n  const [ingredient, setIngredient] = useState(\"\")\r\n\r\n  return(\r\n    <div className=\"component-container\">\r\n      <ChooseGroup\r\n        groupData={props.groupData}\r\n        setCurrentGroup={setCurrentGroup}\r\n      />\r\n      <IngredientInput\r\n        setIngredient={setIngredient}\r\n      />\r\n      <MembersDisplay\r\n        currentGroup={currentGroup}\r\n        profileData={props.profileData}\r\n        groupData={props.groupData}\r\n        ingredient={ingredient}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Food\r\n","const exampleData = [\r\n  {\r\n    id: 1,\r\n    name: \"Eleanor (example)\",\r\n    isVegetarian: false,\r\n    isVegan: false,\r\n    isGlutenFree: false,\r\n    hasNutAllergy: false\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Chidi (example)\",\r\n    isVegetarian: true,\r\n    isVegan: true,\r\n    isGlutenFree: true,\r\n    hasNutAllergy: false\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Tahani (example)\",\r\n    isVegetarian: true,\r\n    isVegan: false,\r\n    isGlutenFree: true,\r\n    hasNutAllergy: false\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Jason (example)\",\r\n    isVegetarian: false,\r\n    isVegan: false,\r\n    isGlutenFree: false,\r\n    hasNutAllergy: true,\r\n  }\r\n]\r\n\r\nexport default exampleData\r\n","import React, {useState} from 'react';\nimport {Switch, Route} from \"react-router-dom\"\nimport './App.css';\nimport Footer from \"./components/Footer\"\nimport Header from \"./components/Header\"\nimport Navbar from \"./components/Navbar\"\nimport Welcome from \"./components/Welcome\"\nimport Profiles from \"./components/ProfileComponents/Profiles\"\nimport Groups from \"./components/GroupComponents/Groups\"\nimport Food from \"./components/FoodComponents/Food\"\nimport exampleData from \"./exampleData\"\n\nfunction App() {\n  //some example profiles and groups are provided in the initial state\n  const [profileData, setProfileData] = useState(exampleData);\n  const [groupData, setGroupData] = useState([\n    {groupName: \"Dinner Party (example)\", members: [1, 2, 3, 4]},\n    {groupName: \"Breakfast (example)\", members: [3, 2, 4]}\n  ])\n\n  function handleChange(event, stateUpdateFunction){\n    const {name, value, type, checked} = event.target;\n    type ===\"checkbox\" ?\n    stateUpdateFunction(prevInfo => ({...prevInfo, [name]: checked})) :\n    stateUpdateFunction(prevInfo => ({...prevInfo, [name]: value}));\n  }\n\n  return (\n    <div id=\"app-container\">\n      <Header />\n      <Navbar />\n      <div id=\"main\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Welcome />\n          </Route>\n          <Route path=\"/profiles\">\n            <Profiles\n              profileData={profileData}\n              setProfileData={setProfileData}\n              handleChange={handleChange}\n            />\n          </Route>\n          <Route path=\"/groups\">\n            <Groups\n              profileData={profileData}\n              handleChange={handleChange}\n              groupData={groupData}\n              setGroupData={setGroupData}\n            />\n          </Route>\n          <Route path=\"/food\">\n            <Food\n              groupData={groupData}\n              profileData={profileData}\n              groupData={groupData}\n            />\n          </Route>\n        </Switch>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter as Router} from \"react-router-dom\"\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}